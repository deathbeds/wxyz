name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # maybe could normalize to semi-standard `CI`
  RUNNING_IN_CI: 1
  RUNNING_IN_GITHUB: 1
  # increment to reset all caches
  CACHE_EPOCH: 3005
  # python cruft
  PYTHONIOENCODING: utf-8
  PYTHONUNBUFFERED: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  # mamba cruft
  FORGE_URL: https://github.com/conda-forge/miniforge/releases/download
  CONDA_EXE: mamba
  MAMBA_NO_BANNER: 1

jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [ubuntu]
        python-version: ['3.11']
        lab: ['3.0']
        include:
          - os: ubuntu
            conda-subdir: linux-64
            forge-ext: Linux-x86_64.sh
    defaults:
      run:
        shell: bash -l {0}
    env:
      BUILDING_IN_CI: 1
    steps:
      - uses: actions/checkout@v3

      # configure builtin providers
      - name: setup (python)
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: setup (node)
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # restore caches
      - name: cache (pip)
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-${{ hashFiles('.github/reqs/pip-build.txt') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-

      - name: cache (node)
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ env.CACHE_EPOCH }}-${{ runner.os }}-node-build-${{ hashFiles('yarn.lock', '.gitub/reqs/pip-build.txt') }}

      - name: cache (yarn)
        uses: actions/cache@v3
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        id: cache-yarn-packages
        with:
          path: .yarn-packages
          key: ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-
            ${{ env.CACHE_EPOCH }}-yarn-

      - name: setup (pip)
        run: pip install -U pip wheel setuptools

      - name: setup (pip build)
        run: pip install -U -v -r .github/reqs/pip-build.txt

      - name: check (pip)
        run: |
          set -eux
          mkdir -p build/pip
          pip freeze | tee build/pip/dist.pip.freeze
          pip check

      - name: upload (pip freeze)
        uses: actions/upload-artifact@v3
        with:
          name: wxyz ${{ github.run_number }} build pip freeze
          path: ./build/pip/

      - name: list
        run: doit list --all --status

      - name: build
        run: doit -n4 ts hash_dist || doit ts hash_dist

      - name: status
        run: doit list --all --status | sort
        if: always()

      - name: upload (dist)
        uses: actions/upload-artifact@v3
        with:
          name: wxyz ${{ github.run_number }} dist
          path: ./dist

  test:
    name: ${{ matrix.lockname }} ${{ matrix.conda-subdir }}-${{ matrix.python-version }}-${{ matrix.lab }}
    needs: [build]
    runs-on: ${{ matrix.os }}-latest
    env:
      TESTING_IN_CI: 1
      ATEST_RETRIES: 1
    strategy:
      # TODO: remove
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        python-version: ['3.8', '3.11']
        lab: ['3.0']
        include:
          - os: ubuntu
            conda-subdir: linux-64
            forge-ext: Linux-x86_64.sh
            lockname: test
          - os: macos
            conda-subdir: osx-64
            forge-ext: MacOSX-x86_64.sh
            lockname: test
          - os: windows
            forge-ext: Windows-x86_64.exe
            conda-subdir: win-64
            lockname: test
          - os: ubuntu
            python-version: '3.11'
            lockname: docs
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v3

      - name: lock
        id: lock
        run: |
          echo "::set-output name=lockfile::${{
            format(
              '.github/locks/conda.{0}.{1}-{2}-{3}.lock',
              matrix.lockname,
              matrix.conda-subdir,
              matrix.python-version,
              matrix.lab
            ) }}"

      - name: cache (conda)
        uses: actions/cache@v3
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-conda-${{ matrix.python-version }}-${{
            hashFiles(steps.lock.outputs.lockfile) }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-conda-${{ matrix.python-version }}-

      - name: cache (yarn)
        if: ${{ matrix.lockname == 'docs' }}
        uses: actions/cache@v3
        with:
          path: .yarn-packages
          key: yarn-${{ runner.os }}-${{ hashFiles('yarn.lock', '.yarnrc') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ matrix.conda-subdir }}-
            ${{ env.CACHE_EPOCH }}-yarn-

      - name: download (dist)
        uses: actions/download-artifact@v3
        with:
          name: wxyz ${{ github.run_number }} dist
          path: ./dist

      - name: setup (mamba)
        uses: conda-incubator/setup-miniconda@v2
        with:
          condarc-file: .github/.condarc
          miniforge-variant: Mambaforge
          use-mamba: true
          use-only-tar-bz2: true

      - name: mamba (env, unix)
        if: ${{ matrix.os != 'windows' }}
        run: mamba info --json && mamba create -p ./envs/_base test --file "${{ steps.lock.outputs.lockfile }}"

      - name: mamba (env, win)
        if: ${{ matrix.os == 'windows' }}
        shell: cmd /C CALL {0}
        run: mamba info --json && mamba create -p ./envs/_base --file "${{ steps.lock.outputs.lockfile }}"

      - name: doit (lint)
        if: ${{ matrix.lockname == 'docs' }}
        run: source "${CONDA}/bin/activate" ./envs/_base && TESTING_IN_CI=0 doit -n4 lint

      - name: doit (test, unix)
        if: ${{ matrix.os != 'windows' }}
        run: source "${CONDA}/bin/activate" ./envs/_base && doit setup_py_ci nbtest robot || doit setup_py_ci nbtest robot

      - name: doit (test, windows)
        if: ${{ matrix.os == 'windows' }}
        shell: cmd /C CALL {0}
        run: .github/win.bat

      - name: upload (atest)
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: wxyz ${{ github.run_number }} atest ${{ matrix.conda-subdir }} ${{ matrix.python }} ${{ matrix.lab }}
          path: atest/output

      - name: upload (widgets)
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: wxyz ${{ github.run_number }} nbwidgets ${{ matrix.conda-subdir }} ${{ matrix.python }} ${{ matrix.lab }}
          path: ./build/nbwidgets

      - name: doit (docs)
        if: ${{ matrix.lockname == 'docs' }}
        env:
          TESTING_IN_CI: 0
        run: source "${CONDA}/bin/activate" ./envs/_base && doit -n4 docs || doit docs

      - name: upload (docs)
        uses: actions/upload-artifact@v3
        if: ${{ matrix.lockname == 'docs' }}
        with:
          name: wxyz ${{ github.run_number }} docs ${{ matrix.conda-subdir }} ${{ matrix.python }} ${{ matrix.lab }}
          path: build/docs

      - name: cache (links)
        uses: actions/cache@v3
        if: ${{ matrix.lockname == 'docs' }}
        with:
          path: build/check_links
          key:
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-links-${{ matrix.python-version }}-${{
            hashFiles(steps.lock.outputs.lockfile) }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-links-${{ matrix.python-version }}-

      - name: check (spelling, checklinks)
        if: ${{ matrix.lockname == 'docs' }}
        run: source "${CONDA}/bin/activate" ./envs/_base && TESTING_IN_CI=0 doit -n4 spell checklinks || doit spell checklinks
